pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials'
        DEPLOYMENT_NAME = 'profile_page'
        IMAGE_TAG = "v0.${env.BUILD_NUMBER}"
        SLACK_CHANNEL = '#jenkins'
        SLACK_CREDENTIALS_ID = 'slack-token'
        SONARQUBE_ENV = 'sonar-server'  // Update this with your SonarQube server name
        SONARQUBE_URL = 'http://192.168.1.119:9000'  // SonarQube server URL
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], userRemoteConfigs: [[url: 'https://github.com/shittuay/profile_page.git']]])
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv(env.SONARQUBE_ENV) {
                        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONARQUBE_TOKEN')]) {
                            sh '''
                                sonar-scanner \
                                    -Dsonar.projectKey=profile_page \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=${SONARQUBE_URL} \
                                    -Dsonar.login=${SONARQUBE_TOKEN}
                            '''
                        }
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh "docker build -t ${DOCKERHUB_USERNAME}/${DEPLOYMENT_NAME}:${IMAGE_TAG} ."
                    }
                    echo "Image built successfully"
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh "echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin"
                        sh "docker push ${DOCKERHUB_USERNAME}/${DEPLOYMENT_NAME}:${IMAGE_TAG}"
                    }
                    echo "Image pushed successfully"
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    kubeconfig(credentialsId: 'kubeconfig', serverUrl: '') {
                        // Update and apply Kubernetes deployment YAMLs
                        sh "sed -i 's|IMAGE_TAG|${env.IMAGE_TAG}|g' k8s/master-profile-page-deployment.yaml"
                        sh "kubectl apply -f k8s/master-profile-page-deployment.yaml"

                        sh "sed -i 's|IMAGE_TAG|${env.IMAGE_TAG}|g' k8s/profile-page-deployment.yaml"
                        sh "kubectl apply -f k8s/profile-page-deployment.yaml"
                        
                        echo "Deployment applied to Kubernetes"
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            script {
                echo "Sending success notification to Slack"
                slackSend(channel: env.SLACK_CHANNEL, color: 'good', message: "Deployment successful: ${currentBuild.currentResult}: \nJOB_NAME: ${env.JOB_NAME} \nBUILD_NUMBER: ${env.BUILD_NUMBER} \nMore Info: ${env.BUILD_URL}", tokenCredentialId: env.SLACK_CREDENTIALS_ID)
            }
        }
        failure {
            script {
                echo "Sending failure notification to Slack"
                slackSend(channel: env.SLACK_CHANNEL, color: 'danger', message: "Deployment failed: ${currentBuild.currentResult}: \nJOB_NAME: ${env.JOB_NAME} \nBUILD_NUMBER: ${env.BUILD_NUMBER} \nMore Info: ${env.BUILD_URL}", tokenCredentialId: env.SLACK_CREDENTIALS_ID)
            }
        }
    }
}
